/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_br.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>;
};

&mt {
    bindings = <&kp>, <&kp>;

    tapping-term-ms = <200>;
};

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kt CAPSLOCK>;

            tapping-term-ms = <400>;
        };
        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <1>;
            continue-list = <BACKSPACE DELETE DOT COMMA KP_EQUAL KP_MULTIPLY KP_PLUS KP_MINUS KP_DIVIDE PERCENT F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 EQUAL PLUS STAR MINUS>;
            ignore-numbers;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_LGUI|MOD_RALT|MOD_RGUI)>;
        };
        nav_smart_layers: nav_smart_layers {
            compatible = "zmk,behavior-caps-word";
            label = "NAV_SMART_LAYERS";
            #binding-cells = <0>;
            layers = <1>;
            ignore-numbers;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_LGUI|MOD_RALT|MOD_RGUI)>;
            continue-list = <UP DOWN RIGHT LEFT TAB PAGE_UP PAGE_DOWN HOME END>;
        };
        smart_func: smart_func {
            compatible = "zmk,behavior-caps-word";
            label = "SMART_FUNC";
            #binding-cells = <0>;
            layers = <1>;
            ignore-numbers;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_LGUI|MOD_RALT|MOD_RGUI)>;
            continue-list = <F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lpar {
            bindings = <&kp BR_LEFT_PARENTHESIS>;
            key-positions = <19 18>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };

        lbkt {
            bindings = <&kp BR_LEFT_BRACKET>;
            key-positions = <7 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };

        lbrc {
            bindings = <&kp BR_LEFT_BRACE>;
            key-positions = <31 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };

        rbrc {
            bindings = <&kp BR_RIGHT_BRACE>;
            key-positions = <33 34>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };

        rbkt {
            bindings = <&kp BR_RIGHT_BRACKET>;
            key-positions = <9 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };

        rpar {
            bindings = <&kp BR_RIGHT_PARENTHESIS>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_colemak_layer {
            bindings = <
&shift_caps        &kp Q            &kp W            &kp F         &kp P              &kp B          &kp J        &kp L               &kp U         &kp Y             &mt DOLLAR BR_SEMI         &mt STAR SQT
&mt EXCL PIPE      &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G          &kp M        &hmr RIGHT_SHIFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O           &mt AMPS BR_MINUS
&nav_smart_layers  &kp Z            &kp X            &kp C         &kp D              &kp V          &kp K        &kp H               &mt AT COMMA  &mt HASH PERIOD   &mt BR_BACKSLASH BR_SLASH  &num_word
                                                     &kp ESC       &lt 2 DELETE       &lt 3 ENTER    &lt 5 SPACE  &kp BACKSPACE       &lt 1 TAB
            >;
        };

        num_layer {
            bindings = <
&kp BR_PERCENT  &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp MINUS    &trans       &trans           &trans     &trans    &trans        &trans
&kp BR_COMMA    &kp SLASH     &kp N4  &kp N5  &kp N6  &kp PLUS     &smart_func  &kp RIGHT_SHIFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &trans
&kp BR_PERIOD   &kp N0        &kt N1  &kp N2  &kt N3  &kp EQUAL    &trans       &trans           &trans     &trans    &to 4         &to 0
                                      &trans  &trans  &trans       &trans       &trans           &trans
            >;
        };

        media_layer {
            bindings = <
&trans      &kp C_REWIND      &kp C_FF      &kp K_REDO           &kp K_UNDO    &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans      &kp C_BRI_DN      &kp C_BRI_UP  &mt C_MUTE C_VOL_DN  &kp C_VOL_UP  &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp K_PASTE          &kp K_COPY    &kp K_CUT          &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans               &trans        &trans             &trans  &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &none     &kp LA(LEFT)  &kp LS(LC(TAB))  &kp LC(TAB)  &kp LA(RIGHT)  &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT      &kp DOWN         &kp UP       &kp RIGHT      &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME      &kp PAGE_DOWN    &kp PAGE_UP  &kp END        &kp INSERT  &trans
                        &trans  &trans  &trans    &trans        &trans           &trans
            >;
        };

        bt_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &to 6   &to 0   &trans  &trans  &trans
&trans  &trans        &trans        &trans        &bt BT_CLR    &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &to 0         &trans        &trans          &trans  &trans  &trans
            >;
        };

        accent_layer {
            bindings = <
&trans  &none  &none  &none             &none   &none     &none         &none         &none         &none         &none          &none
&trans  &none  &none  &none             &none   &none     &kp BR_GRAVE  &kp BR_ACUTE  &kp BR_CARET  &kp BR_TILDE  &kp BR_UMLAUT  &none
&trans  &none  &none  &kp BR_C_CEDILLA  &none   &none     &none         &none         &none         &none         &none          &none
                      &trans            &trans  &trans    &trans        &trans        &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC  &kp TAB    &kp Q  &kp W     &kp E           &kp R        &kp N1        &kp N2        &kp N3      &kp N4       &kp N5       &kp PAGE_UP
&kp J    &kp LSHFT  &kp A  &kp S     &kp D           &kp F        &kp N6        &kp N7        &kp N8      &kp N9       &kp N0       &kp PAGE_DOWN
&kp M    &kp LCTRL  &kp Z  &kp X     &kp C           &kp V        &kp BR_MINUS  &kp BR_COMMA  &kp BR_DOT  &kp BR_SEMI  &kp BR_FSLH  &to 4
                           &kp LALT  &kp LEFT_SHIFT  &kp SPACE    &kp ENTER     &kp RALT      &kp ESC
            >;
        };

        function_layer {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };
    };
};
